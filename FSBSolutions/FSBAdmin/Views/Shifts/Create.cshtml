@model FSBAdmin.Models.ShiftViewModel

@{
    ViewBag.Title = "Create";
    ViewBag.Heading = "Shift - Create";
}




@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div>

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div class="form-group">
            @Html.LabelFor(model => model.CountryId)

            @Html.DropDownListFor(model => model.CountryId, null, "--Select Country--", htmlAttributes: new { @class = "form-control", id = "countryid" })
            @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })

        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.CompanyId)

            @*@Html.DropDownList("",null, "--Select Company--", htmlAttributes: new { @class = "form-control" })*@
            @Html.DropDownListFor(model => model.CompanyId, Enumerable.Empty<SelectListItem>(), "--Select Company--", htmlAttributes: new { @class = "form-control", id = "companyid" })
            @Html.ValidationMessageFor(model => model.CompanyId, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Shift.Plant.PlantName)

            @*@Html.DropDownList("PlantId", null, htmlAttributes: new { @class = "form-control" })*@
            @Html.DropDownListFor(model => model.Shift.PlantId, Enumerable.Empty<SelectListItem>(), "--Select Plant--", htmlAttributes: new { @class = "form-control", id = "plantid" })
            @Html.ValidationMessageFor(model => model.Shift.Plant.PlantName, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Shift.ShiftName)

            @Html.EditorFor(model => model.Shift.ShiftName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Shift.ShiftName, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Shift.ShiftStartTime)

            @Html.EditorFor(model => model.Shift.ShiftStartTime, new { htmlAttributes = new { @class = "form-control timepicker" } })
            @Html.ValidationMessageFor(model => model.Shift.ShiftStartTime, "", new { @class = "text-danger" })

        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Shift.ShiftEndTime)

            @Html.EditorFor(model => model.Shift.ShiftEndTime, new { htmlAttributes = new { @class = "form-control timepicker" } })
            @Html.ValidationMessageFor(model => model.Shift.ShiftEndTime, "", new { @class = "text-danger" })

        </div>



        <div class="form-group">
            @Html.LabelFor(model => model.Shift.Status, new { @class = "float-left" })

            <div class="checkbox float-left ml-3">
                @Html.EditorFor(model => model.Shift.Status)
                @Html.ValidationMessageFor(model => model.Shift.Status, "", new { @class = "text-danger" })
            </div>

        </div>

        <button type="submit" class="btn btn-primary hvr-float ripple text-uppercase font-weight-bold w-100 mt-2">Create</button>
    </div>
}

<div class="mt-3">
    @Html.ActionLink("Back to List", "Index", "", new { @class = "redLink" })
</div>
<link href="~/Content/wickedpicker.min.css" rel="stylesheet" />
@section Scripts {
    <script>
        hitapi.plants = false;
    </script>

    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/wickedpicker.js"></script>


    <script>
        var options = {
            //now: "12:35", //hh:mm 24 hour format only, defaults to current time
            twentyFour: false,  //Display 24 hour format, defaults to false
            upArrow: 'wickedpicker__controls__control-up',  //The up arrow class selector to use, for custom CSS
            downArrow: 'wickedpicker__controls__control-down', //The down arrow class selector to use, for custom CSS
            close: 'wickedpicker__close', //The close class selector to use, for custom CSS
            hoverState: 'hover-state', //The hover state class to use, for custom CSS
            title: 'Timepicker', //The Wickedpicker's title,
            showSeconds: false, //Whether or not to show seconds,
            timeSeparator: ' : ', // The string to put in between hours and minutes (and seconds)
            secondsInterval: 1, //Change interval for seconds, defaults to 1,
            minutesInterval: 1, //Change interval for minutes, defaults to 1
            beforeShow: null, //A function to be called before the Wickedpicker is shown
            afterShow: null, //A function to be called after the Wickedpicker is closed/hidden
            show: null, //A function to be called when the Wickedpicker is shown
            clearable: false, //Make the picker's input clearable (has clickable "x")
        };
        $('.timepicker').wickedpicker(options);

    </script>

}
